#!/usr/bin/python
"""
usage: kiwicompat -h | --help
       kiwicompat --prepare=<description> --root=<image-root>
           [--recycle-root]
           [--logfile=<filename>]
           [--set-repo=<uri>]
           [--set-repoalias=<alias>]
           [--set-repopriority=<priority>]
           [--set-repotype=<type>]
           [--add-repo=<uri>...]
           [--add-repoalias=<alias>...]
           [--add-repopriority=<priority>...]
           [--add-repotype=<type>...]
           [--debug]
       kiwicompat --create=<image-root> --dest-dir=<destination>
           [--type=<image-type>]
           [--logfile=<filename>]
           [--debug]
       kiwicompat --upgrade=<image-root>
           [--add-package=<name>...]
           [--del-package=<name>...]
           [--logfile=<filename>]
           [--debug]
       kiwicompat -v | --version

options:
    -p | --prepare
    -c | --create
    -d | --dest-dir
    -t | --type
    -u | --upgrade
    -l | --logfile
    -v --version
"""

import sys
import logging
from docopt import docopt
from docopt import DocoptExit


class Cli(object):
    """
        Compatibility class for old style kiwi calls
    """
    def __init__(self):
        try:
            self.compat_args = docopt(
                __doc__, options_first=True
            )
        except DocoptExit as e:
            message_header = '\n'.join(
                [
                    'The provided legacy kiwi commandline is invalid',
                    'or not supported. Plase check the following usage',
                    'information if you just mistyped the call:'
                ]
            )
            message_footer = '\n'.join(
                [
                    'In case of a correct legacy kiwi command but not',
                    'supported by kiwicompat, please contact us via the',
                    'github issue system at:\n',
                    'https://github.com/SUSE/kiwi/issues'
                ]
            )
            raise NotImplementedError(
                '%s\n\n%s\n\n%s' %
                (message_header, format(e), message_footer)
            )


class Translate(object):
    def __init__(self, arguments):
        self.arguments = arguments

        self.translated = ['kiwi']
        if self.arguments['--logfile']:
            self.translated.append('--logfile')
            self.translated.append(self.arguments['--logfile'])
        if self.arguments['--debug']:
            self.translated.append('--debug')
        if self.arguments['--type']:
            self.translated.append('--type')
            self.translated.append(self.arguments['--type'])

        if self.arguments['--create']:
            self.create(self.arguments['--create'])
        elif self.arguments['--prepare']:
            self.prepare(self.arguments['--prepare'])
        elif self.arguments['--upgrade']:
            self.upgrade(self.arguments['--upgrade'])

    def create(self, root):
        self.translated.append('system')
        self.translated.append('create')
        self.translated.append('--root')
        self.translated.append(root)
        self.translated.append('--target-dir')
        self.translated.append(self.arguments['--dest-dir'])

    def prepare(self, description):
        self.translated.append('system')
        self.translated.append('prepare')
        self.translated.append('--description')
        self.translated.append(description)
        self.translated.append('--root')
        self.translated.append(self.arguments['--root'])
        if self.arguments['--recycle-root']:
            self.translated.append('--allow-existing-root')
        # TODO: repo handling

    def upgrade(self, root):
        self.translated.append('system')
        self.translated.append('update')
        self.translated.append('--root')
        self.translated.append(root)
        # TODO: package handling


logging.basicConfig(format='%(message)s')

try:
    app = Cli()
    arguments = Translate(app.compat_args)
    print arguments.translated
except NotImplementedError as e:
    logging.error(format(e))
